/******************************************************
 * IMIGE/TCP, Copyright (C) 1995, IMIGE Systems Inc.
 *
 *  All rights reserved.
 *  This software is under BSD license. see LICENSE.txt
 *
 *  Author : Minsuk Lee (ykhl1itj@gmail.com)
 ******************************************************/

#include "imigetsr.h"
#include <stdarg.h>
#include <string.h>

#define NO_INTERRUPT
#define FRMWRI_BUFSIZE 134
#define put_one_char(x)	raw_out(x)

static void screen_init(void);
static void raw_out(char ch);
static char buf[FRMWRI_BUFSIZE];
static char __hex[] = "0123456789ABCDEF";

static int _formatted_write (char *format, va_list ap);

void
rprintf(char *format, ...)			/* Our main entry */
{
	va_list ap;

	va_start(ap, format);	/* Variable argument begin */
#ifdef NO_INTERRUPT
	disable_interrupt();
#endif
	_formatted_write (format, ap);
#ifdef NO_INTERRUPT
	enable_interrupt();
#endif
	va_end(ap);		/* Variable argument end */
}

static
int
_formatted_write(char *format, va_list ap)
{
	char format_flag, flag_char, left_adjust, zeropad, *buf_pointer, *ptr;
	int precision, length, n, field_width;
	unsigned long long_value;
	long number;

	for (;;) {
		while ((format_flag = *format++) != '%') {
			if (!format_flag)
				return; /* End of Format String */
			put_one_char (format_flag);
		}
		if (*format == '%') {	/* %% prints as % */
			format++;
			put_one_char('%');
			continue;
		}

		flag_char = left_adjust = 0;
		for (;;) {	/* check for leading -, + or ' 'flags  */
			if (*format == '+' || *format == ' ') {
				flag_char = *format++;
			} else if (*format == '-') {
				left_adjust++;
				format++;
			} else {
				break;
			}
		}

		if (*format == '0') {	/* this is the requested fill character */
			zeropad = 1;
			format++;
		} else {
			zeropad = 0;
		}
    
		field_width = 0;
		while (*format >= '0' && *format <= '9')
			field_width = field_width * 10 + (*format++ - '0');
    
		precision = -1;
		if (*format == 'l') {	/* Optional "l" modifier? */
			length = 1;
			format++;
		} else {
			length = 0;
		}
    
		switch (format_flag = *format++) {
		   case 'c':
			buf[0] = va_arg(ap, int);
			ptr = buf_pointer = &buf[0];
			if (buf[0])
				ptr++;
			break;

		   case 's':
			if ( !(buf_pointer = va_arg(ap,char *)) )
				buf_pointer = "(null)";
			precision = 10000;
			for (n=0; *buf_pointer++ && n < precision; n++)
				;
			ptr = --buf_pointer;
			buf_pointer -= n;
			break;

		   case 'p':
		   case 'X':
		   case 'x':
			if (format_flag == 'p')
				long_value = (long)va_arg(ap,char *);
			else if (length)
				long_value = va_arg(ap,unsigned long);
			else
				long_value = (unsigned)va_arg(ap,int);
			ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
			do {
				*--buf_pointer = *(__hex + ((int) long_value & 0x0F));
			} while (long_value >>= 4);
			if (zeropad)
				precision = field_width;
loop0:			if ((int)(ptr - buf_pointer) < precision) {
				*--buf_pointer = '0';
				goto loop0;
			}
			break;

		   case 'd':
		   case 'D':
		   case 'u':
			if (length)
				number = va_arg(ap, long);
			else {
				n = va_arg(ap, int);
				if (format_flag == 'u')
					number = (unsigned) n;
				else
					number = (long) n;
			}
			//if (n = (format_flag != 'u' && number < 0)) {
			if ((format_flag != 'u') && (number < 0)) {
				n = 1;
				flag_char = '-';
				long_value = -number;
			} else {
				n = (flag_char != 0);
				long_value = number;
			}

		        /* now convert to digits */

			ptr = buf_pointer = &buf[FRMWRI_BUFSIZE - 1];
			do {
				*--buf_pointer = (long_value % 10) + '0';
			} while (long_value /= 10);
			if (zeropad)
				precision = field_width - n;
loop1:			if ((int)(ptr - buf_pointer) < precision) {
				*--buf_pointer = '0';
				goto loop1;
			}
			break;

		   default:	/* Undefined conversion! */
			ptr = buf_pointer = "???";
			ptr += 4;
			break;
		}

		/* emittes the formatted string to "put_one_char". */
		if ( (length = (unsigned)ptr - (unsigned)buf_pointer) > field_width) {
			n = 0;
		} else {
			n = field_width - length - (flag_char != 0);
		}
  
		/* emit any leading pad characters */
		if (!left_adjust) {
			while (--n >= 0) {
				put_one_char(' ');
			}
		}
      
		/* emit flag characters (if any) */
		if (flag_char) {
			put_one_char(flag_char);
		}

		/* emit the string itself */
		while (--length >= 0) {
			put_one_char(*buf_pointer++);
		}
    
		/* emit trailing space characters */
		if (left_adjust)
			while (--n >= 0) {
				put_one_char(' ');
			}
	}
}

//-------------------------------------------------------
//   Raw screen output routine being used on debuging
//-------------------------------------------------------

#define MONO 0xb000
#define COLO 0xb800

#define MAXROW	22
#define S_ROW	0

static int row, col;
static unsigned base = 0;

static
void
screen_init()
{
	col = 0;
	row = MAXROW - 1;
	asm	int	0x11
	if ((_AX & 0x0030) == 0x0030) {
		base = MONO;
	} else {
		base = COLO;
	}
}

void
raw_out(char ch)
{
	int i;

	if (!base)
		screen_init();
	switch (ch) {
	   case 0x08 :	/* Back Space */
		if (--col < 0)
			col = 0;
		break;
	   case 0x0A :	/* Line Feed */
		col = 0;
		goto scroll;
	   case 0x0D :	/* Carriage Return */
		col = 0;
		break;
	   case 0x09 :	/* H TAB */
		for (i = col; i < ((((col + 8) / 8) * 8) - 1); i++)
			pokeb(base, row * 160 + i * 2, ' ');
		col = ((col + 8) / 8) * 8 - 1;
		goto adjust;
	   default :
		pokeb(base, row * 160 + col * 2, ch);
adjust:		if (++col == 80) {
		   col = 0;
scroll:		   if (++row >= (MAXROW + 1)) {
			row = MAXROW;
			copy_mem(base, (160 * S_ROW),
				 base, (160 * (S_ROW + 1)),
				 160 * (MAXROW - S_ROW));
			for (i = 0; i < 80; i++)
				pokeb(base, MAXROW * 80 * 2 + i * 2, ' ');
		   }
		}
		break;
	}
}
